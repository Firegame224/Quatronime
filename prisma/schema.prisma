// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Anime2 {
  id         Int          @id @default(autoincrement())
  title      String       @unique
  imageUrl   String?
  synopsis   String?
  ranking    Int?
  score      Float?
  type       String?
  episodes   Int?
  genres     String[]
  karakter   Karakter[]   @relation("Anime to Karakter")
  aired      String?
  popularity Int?
  members    Int?
  favorites  Int?
  status     String?
  source     String?
  trailer    String?
  komentar   Komentar[]   @relation("Anime to Komentar")
  collection Collection[] @relation("Anime to Collection")
  CreatedAt  DateTime     @default(now())
  UpdateAt   DateTime     @updatedAt
}

model Karakter {
  id        String   @id @default(uuid())
  imageUrl  String?
  name      String?
  role      String?
  cover     String?
  anime     Anime2   @relation("Anime to Karakter", fields: [animeId], references: [id])
  animeId   Int
  CreatedAt DateTime @default(now())
  UpdateAt  DateTime @updatedAt
}

model Komentar {
  id      String  @id @default(uuid())
  // User relation
  user    User    @relation("User to Komentar", fields: [userId], references: [id])
  userId  String
  name    String?
  // Anime Relation
  anime   Anime2? @relation("Anime to Komentar", fields: [animeId], references: [id])
  animeId Int

  komentar  String?
  image     String?
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model User {
  id         String       @id @default(uuid())
  email      String       @unique
  name       String?
  password   String?
  role       String       @default("USER")
  image      String       @default("https://i.pinimg.com/736x/09/7d/3c/097d3cf1d036e549d1caa10ad9268dfe.jpg")
  komentar   Komentar[]   @relation("User to Komentar")
  collection Collection[] @relation("User to Collection")
  createdAt  DateTime     @default(now())
  updateAt   DateTime     @updatedAt
}

model Collection {
  id      String @id @default(uuid())
  animeId Int
  user    User   @relation("User to Collection", fields: [userId], references: [id])
  userId  String

  anime Anime2 @relation("Anime to Collection", fields: [animeId], references: [id])

  @@unique([userId, animeId])
}
